import os
import numpy as np
import librosa
import soundfile
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

//Function to extract features from audio
def extract_features(file_name):
    with soundfile.SoundFile(file_name) as sound_file:
        X = sound_file.read(dtype="float32")
        sample_rate = sound_file.samplerate

        //Extract MFCCs, chroma, and mel
        stft = np.abs(librosa.stft(X))
        mfccs = np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=40).T, axis=0)
        chroma = np.mean(librosa.feature.chroma_stft(S=stft, sr=sample_rate).T, axis=0)
        mel = np.mean(librosa.feature.melspectrogram(y=X, sr=sample_rate).T, axis=0)

        return np.hstack([mfccs, chroma, mel])

// Define emotions and load dataset
emotions = {
    '01': 'neutral',
    '02': 'calm',
    '03': 'happy',
    '04': 'sad',
    '05': 'angry',
    '06': 'fearful',
    '07': 'disgust',
    '08': 'surprised'
}

//Emotions to observe
observed_emotions = ['happy', 'sad', 'angry', 'neutral']

def load_data(dataset_path):
    x, y = [], []
    for file in os.listdir(dataset_path):
        if file.endswith(".wav"):
            emotion = emotions.get(file.split("-")[2])
            if emotion not in observed_emotions:
                continue
            features = extract_features(os.path.join(dataset_path, file))
            x.append(features)
            y.append(emotion)
    return np.array(x), np.array(y)

// Load dataset
dataset_path = "path_to_audio_files"
X, y = load_data(dataset_path)

//Split the dataset
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

// Train a model
model = RandomForestClassifier()
model.fit(x_train, y_train)

// Predict and evaluate
y_pred = model.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy*100:.2f}%")
